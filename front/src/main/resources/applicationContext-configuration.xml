<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:jee="http://www.springframework.org/schema/jee"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-4.3.xsd
						http://www.springframework.org/schema/jee
						http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		  class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 启用支持Annotation注解方式的事务管理 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<context:component-scan base-package="com.wu">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	<!-- 定义了与实体相关的dao -->
	<bean id="genericEntityDao"
		  class="com.wu.general.core.base.GenericEntityDao" scope="prototype"
		  lazy-init="true">
	</bean>

	<!-- 配置JPA -->
	<bean name="entityManagerFactory"
		  class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceUnitName" value="general-1.0" />
		<property name="packagesToScan">
			<list>
				<value>com.wu.general.foundation.domain</value>
			</list>
		</property>
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter">
			<bean
					class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="showSql" value="false" />
				<property name="generateDdl" value="false" />
				<property name="databasePlatform" value="org.hibernate.dialect.MySQL5InnoDBDialect" />
			</bean>
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory</prop>
				<prop key="hibernate.cache.provider_configuration_file_resource_path">/ehcache.xml</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.cache.auto_evict_collection_cache">true</prop>
				<prop key="hibernate.use_sql_comments">false</prop>
				<prop key="hibernate.format_sql">false</prop>
				<prop key="hibernate.generate_statistics">false</prop>
				<prop key="hibernate.hbm2ddl.auto">validate</prop>
				<prop key="hibernate.id.new_generator_mappings">false</prop>
				<prop key="hibernate.implicit_naming_strategy">legacy-jpa</prop>
				<prop key="javax.persistence.sharedCache.mode">ENABLE_SELECTIVE</prop>
			</props>
		</property>
	</bean>

	<beans profile="dev">
		<!-- property-placeholder是一个属性遍历器，定位一个属性文件，属性文件存放的是jdbc一些连接数据 -->
		<context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true" />

		<!-- 数据源配置, 数据库连接池 -->
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
			<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
			<property name="driverClassName" value="${jdbc.driverClassName}" />

			<!-- 基本属性 url、user、password -->
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />

			<!-- 配置初始化大小、最小、最大 -->
			<property name="initialSize" value="${jdbc.initialSize}" />
			<property name="minIdle" value="${jdbc.minIdle}" />
			<property name="maxActive" value="${jdbc.maxActive}" />

			<!-- 配置获取连接等待超时的时间 -->
			<property name="maxWait" value="60000" />

			<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
			<property name="timeBetweenEvictionRunsMillis" value="60000" />

			<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
			<property name="minEvictableIdleTimeMillis" value="300000" />

			<!-- 用来验证数据库连接的查询语句，这个查询语句必须是至少返回一条数据的SELECT语句 -->
			<property name="validationQuery" value="${jdbc.testSql}" />
			<property name="testWhileIdle" value="true" />
			<property name="testOnBorrow" value="false" />
			<property name="testOnReturn" value="false" />

			<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
			<property name="poolPreparedStatements" value="true" />
			<property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->

			<!-- 关闭自动提交 -->
			<property name="defaultAutoCommit" value="false" />

			<!-- 配置监控统计拦截的filters -->
			<property name="filters" value="stat" />
		</bean>

		<!-- Timer_MethodInvokingJobDetailFactoryBean定时器 -->
		<bean id="methodInvokingJobDetailFactoryBean"
			  class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
			<property name="targetObject" ref="timer_MethodInvokingJobDetailFactoryBean" />
			<property name="targetMethod" value="execute" />
			<property name="concurrent" value="false" />
		</bean>
		<bean id="timer_MethodInvokingJobDetailFactoryBean_cronTrigger"
			  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
			<property name="jobDetail" ref="methodInvokingJobDetailFactoryBean" />
			<property name="cronExpression" value="0/3 * * * * ?" />
		</bean>

		<!-- MethodInvokingJobDetailFactoryBean定时器调度工厂 -->
		<bean id="methodInvokingJobDetailFactoryBean_schdulerFactory" lazy-init="false"
			  class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
			<property name="triggers">
				<list>
					<ref bean="timer_MethodInvokingJobDetailFactoryBean_cronTrigger"/>
				</list>
			</property>
		</bean>

		<!-- Timer_JobDetailFactoryBean定时器 -->
		<bean id="timerJobDetailFactoryBeanTask" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
			<!-- 任务完成之后是否依然保留到数据库，默认false -->
			<property name="durability" value="true" />
			<property name="requestsRecovery" value="true" />
			<!-- 任务的实现类，必须 -->
			<property name="jobClass" value="com.wu.general.timer.quartz.execute.QuartzExecute"/>
			<!-- 用来给作业提供数据支持的数据结构 -->
			<property name="jobDataAsMap">
				<map>
					<entry key="targetObject" value="Timer_JobDetailFactoryBean" /><!-- 调用的类 -->
					<entry key="targetMethod" value="execute" /><!-- 调用类中的方法 -->
				</map>
			</property>
			<property name="description" value="JobDetailFactoryBean_Test" />
		</bean>
		<bean id="timer_JobDetailFactoryBean_cronTrigger"
			  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
			<property name="jobDetail" ref="timerJobDetailFactoryBeanTask" />
			<property name="cronExpression" value="0/5 * * * * ?" />
		</bean>

		<bean id="jobDetailFactoryBean_schdulerFactory" lazy-init="false" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
			<!-- 配置dataSource -->
			<property name="dataSource" ref="dataSource"/>
			<!--启动时更新己存在的Job-->
			<property name="overwriteExistingJobs" value="true" />
			<!--设置自动启动-->
			<property name="autoStartup" value="true" />
			<property name="configLocation" value="classpath:quartz.properties" />
			<property name="applicationContextSchedulerContextKey" value="applicationContext" />

			<property name="triggers">
				<list>
					<ref bean="timer_JobDetailFactoryBean_cronTrigger"/>
				</list>
			</property>
		</bean>
	</beans>

</beans>